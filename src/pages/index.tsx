import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "../utils/api";
import { string } from "zod";
import { useState } from "react";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <LinkAdd />
          <LinkList />
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">{hello.data ? hello.data.greeting : "Loading tRPC query..."}</p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const LinkAdd: React.FC = () => {
  const { data: sessionData } = useSession();

  type FormLink = {
    slug: string;
    url: string;
  };

  const [formLink, setFormLink] = useState<FormLink>({ slug: "", url: "" });

  const mutation = api.link.add.useMutation();

  return (
    <div className="flex flex-wrap gap-4">
      <input
        className="flex-[0_0_150px] p-2"
        type="text"
        onChange={(e) => {
          setFormLink({
            ...formLink,
            slug: e.target.value,
          });
        }}
        value={formLink.slug}
        placeholder="Slug"
      />
      <input
        className="flex-[1_0_200px] p-2"
        type="text"
        onChange={(e) => {
          setFormLink({
            ...formLink,
            url: e.target.value,
          });
        }}
        value={formLink.url}
        placeholder="Url"
      />
      <button
        className="flex-[1_0_100px] bg-black p-4 text-white hover:bg-gray-900"
        onClick={(e) => {
          e.preventDefault();
          mutation.mutate({ slug: formLink.slug, url: formLink.url, userId: sessionData?.user?.id });
          setFormLink({ slug: "", url: "" });
        }}
      >
        Create
      </button>
    </div>
  );
};

const LinkList: React.FC = () => {
  const { data: sessionData } = useSession();
  const { data: linkList } = api.link.getFromUser.useQuery(
    {
      user: sessionData?.user?.id,
    },
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="grid grid-cols-1 items-center justify-center gap-6 rounded bg-white p-4 text-black">
      <h2 className="py-2 px-8 text-4xl font-bold">Your links</h2>
      {linkList?.map((link) => (
        <div className="border p-3 text-xl shadow hover:bg-gray-100" key={link.slug}>
          <p>Name: {link.slug}</p>
          <p>Url: {link.url}</p>
          <Link className="mt-3 block border bg-slate-200 p-3 text-center hover:bg-slate-300" href={link.url}>
            Go to Link
          </Link>
        </div>
      ))}
    </div>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
