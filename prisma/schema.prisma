// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?           @unique
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  role            String?
  accounts        Account[]
  sessions        Session[]
  SLink           SLink[]
  Subscription    Subscription[]
  UserNameChanges UserNameChanges[]
}

model UserNameChanges {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  oldName   String
  newName   String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String   @db.VarChar(2000)
  slug      String   @unique
  tags      String?

  utm_source   String?
  utm_campaign String?
  utm_medium   String?
  utm_term     String?
  utm_content  String?

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  SLinkClicks SLinkClicks[]

  @@index(slug)
}

model SLinkClicks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  linkId    Int
  link      SLink    @relation(fields: [linkId], references: [id], onDelete: Cascade)
  slug      String
  url       String   @db.VarChar(2000)
  ip        String?
  geo       String?
}

model Plans {
  id           Int            @id @default(autoincrement())
  name         String
  title        String
  linkQuota    Int
  Subscription Subscription[]
}

model Subscription {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId     Int
  plans      Plans    @relation(fields: [planId], references: [id], onDelete: Cascade)
  linkUsage  String?
  clickUsage String?
  startDate  DateTime
  endDate    DateTime
  paymentId  Int?
}
